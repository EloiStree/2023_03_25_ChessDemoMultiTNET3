//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/InputVR/VRControllerChessButton.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRControllerChessButton: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRControllerChessButton()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRControllerChessButton"",
    ""maps"": [
        {
            ""name"": ""ControllerButton"",
            ""id"": ""3d716157-e84b-481d-a47a-16ac81223e5d"",
            ""actions"": [
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""d32c90b5-b298-4106-8f5d-c61bfbc48147"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftGrip"",
                    ""type"": ""Button"",
                    ""id"": ""9e08dfe1-8c56-43e6-be18-27e610aaaa0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""ce620b7a-5b89-467b-b53b-1f03dedaac66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightGrip"",
                    ""type"": ""Button"",
                    ""id"": ""1cfe9677-b4c4-480e-a262-7b1d86862956"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc668fc1-568a-4edd-96bf-454181f1277e"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cec1a9ce-26ba-4e8d-ab85-2893a9473310"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c547fda8-d16b-4875-aec0-2df751fa826f"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71b2b1b8-97a6-4dc2-b53e-ced1e1db6de0"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4250e030-e4a6-4ac8-9dd6-f5cd7dc34487"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e1f233d-21df-419a-a328-ada3be51f8b5"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ea2112c-9c9c-4ba2-b1a8-e86ab2aa57d5"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c91a7c44-1550-40a3-a384-7ffde581d4cd"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControllerButton
        m_ControllerButton = asset.FindActionMap("ControllerButton", throwIfNotFound: true);
        m_ControllerButton_LeftTrigger = m_ControllerButton.FindAction("LeftTrigger", throwIfNotFound: true);
        m_ControllerButton_LeftGrip = m_ControllerButton.FindAction("LeftGrip", throwIfNotFound: true);
        m_ControllerButton_RightTrigger = m_ControllerButton.FindAction("RightTrigger", throwIfNotFound: true);
        m_ControllerButton_RightGrip = m_ControllerButton.FindAction("RightGrip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControllerButton
    private readonly InputActionMap m_ControllerButton;
    private List<IControllerButtonActions> m_ControllerButtonActionsCallbackInterfaces = new List<IControllerButtonActions>();
    private readonly InputAction m_ControllerButton_LeftTrigger;
    private readonly InputAction m_ControllerButton_LeftGrip;
    private readonly InputAction m_ControllerButton_RightTrigger;
    private readonly InputAction m_ControllerButton_RightGrip;
    public struct ControllerButtonActions
    {
        private @VRControllerChessButton m_Wrapper;
        public ControllerButtonActions(@VRControllerChessButton wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTrigger => m_Wrapper.m_ControllerButton_LeftTrigger;
        public InputAction @LeftGrip => m_Wrapper.m_ControllerButton_LeftGrip;
        public InputAction @RightTrigger => m_Wrapper.m_ControllerButton_RightTrigger;
        public InputAction @RightGrip => m_Wrapper.m_ControllerButton_RightGrip;
        public InputActionMap Get() { return m_Wrapper.m_ControllerButton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerButtonActions set) { return set.Get(); }
        public void AddCallbacks(IControllerButtonActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerButtonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerButtonActionsCallbackInterfaces.Add(instance);
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @LeftGrip.started += instance.OnLeftGrip;
            @LeftGrip.performed += instance.OnLeftGrip;
            @LeftGrip.canceled += instance.OnLeftGrip;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
            @RightGrip.started += instance.OnRightGrip;
            @RightGrip.performed += instance.OnRightGrip;
            @RightGrip.canceled += instance.OnRightGrip;
        }

        private void UnregisterCallbacks(IControllerButtonActions instance)
        {
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @LeftGrip.started -= instance.OnLeftGrip;
            @LeftGrip.performed -= instance.OnLeftGrip;
            @LeftGrip.canceled -= instance.OnLeftGrip;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
            @RightGrip.started -= instance.OnRightGrip;
            @RightGrip.performed -= instance.OnRightGrip;
            @RightGrip.canceled -= instance.OnRightGrip;
        }

        public void RemoveCallbacks(IControllerButtonActions instance)
        {
            if (m_Wrapper.m_ControllerButtonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerButtonActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerButtonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerButtonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerButtonActions @ControllerButton => new ControllerButtonActions(this);
    public interface IControllerButtonActions
    {
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnLeftGrip(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
        void OnRightGrip(InputAction.CallbackContext context);
    }
}
